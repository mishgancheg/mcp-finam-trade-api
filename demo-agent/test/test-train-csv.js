#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ demo-agent –Ω–∞ –¥–∞–Ω–Ω—ã—Ö train.csv
 *
 * –ó–∞–¥–∞—á–∞:
 * 1. –ü–æ–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ train.csv –≤ demo-agent
 * 2. –í–∫–ª—é—á–∞–µ—Ç SHOW_MCP_ENDPOINTS=true
 * 3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ endpoints —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏
 * 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫—É accuracy
 * 5. –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
 * 6. –ì–µ–Ω–µ—Ä–∏—Ç wrong_requests.json —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node demo-agent/test/test-train-csv.js
 */

import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import axios from 'axios';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DEMO_AGENT_URL = process.env.DEMO_AGENT_URL || 'http://localhost:3002';
const TRAIN_CSV_PATH = join(__dirname, 'data', 'train.csv');
const WRONG_REQUESTS_PATH = join(__dirname, 'wrong_requests.json');

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å train.csv
 */
function loadTrainCsv() {
  const content = readFileSync(TRAIN_CSV_PATH, 'utf-8');
  const lines = content.trim().split('\n');
  const header = lines[0].split(';');

  const data = [];
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(';');
    const row = {
      uid: values[0],
      type: values[1],
      question: values[2],
      request: values[3],
    };
    data.push(row);
  }

  return data;
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ demo-agent
 */
async function createSession() {
  const response = await axios.post(`${DEMO_AGENT_URL}/api/sessions`, {
    userId: 'test-user',
  });
  return response.data.sessionId;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ demo-agent
 */
async function sendMessage(sessionId, message, accountId = null) {
  const payload = {
    sessionId,
    message,
  };

  if (accountId) {
    payload.accountId = accountId;
  }

  const response = await axios.post(`${DEMO_AGENT_URL}/api/chat`, payload);
  return response.data;
}

/**
 * –ò–∑–≤–ª–µ—á—å account_id –∏–∑ request, –µ—Å–ª–∏ –µ—Å—Ç—å
 */
function extractAccountId(request) {
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã: /v1/accounts/{account_id}/... –∏–ª–∏ ?account_id=...
  const pathMatch = request.match(/\/accounts\/([^\/\?]+)/);
  if (pathMatch) {
    return pathMatch[1];
  }

  const queryMatch = request.match(/[?&]account_id=([^&]+)/);
  if (queryMatch) {
    return queryMatch[1];
  }

  return null;
}

/**
 * –ò–∑–≤–ª–µ—á—å endpoints –∏–∑ toolCalls
 */
function extractEndpoints(toolCalls) {
  if (!toolCalls || !Array.isArray(toolCalls)) {
    return [];
  }

  const endpoints = [];
  for (const toolCall of toolCalls) {
    // –ò—â–µ–º endpoints –≤ metadata –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
    if (toolCall.endpoints && Array.isArray(toolCall.endpoints)) {
      endpoints.push(...toolCall.endpoints);
    }
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –µ—Å–ª–∏ endpoints –≤ result
    if (toolCall.result && toolCall.result.endpoints) {
      endpoints.push(...toolCall.result.endpoints);
    }
  }

  return endpoints;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å endpoint –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 * –ó–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
 */
function normalizeEndpoint(endpoint, accountId = null) {
  let normalized = endpoint;

  // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π account_id –Ω–∞ {account_id}
  if (accountId) {
    normalized = normalized.replace(accountId, '{account_id}');
  } else {
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –ª—é–±–æ–π account_id –≤ –ø—É—Ç–∏
    normalized = normalized.replace(/\/accounts\/[^\/\?]+/, '/accounts/{account_id}');
    normalized = normalized.replace(/account_id=[^&]+/, 'account_id={account_id}');
  }

  // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ order_id –Ω–∞ {order_id}
  normalized = normalized.replace(/\/orders\/[A-Z0-9]+/, '/orders/{order_id}');

  // –£–±–∏—Ä–∞–µ–º timestamp –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
  // (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)

  return normalized;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ request —Å endpoints
 */
function matchRequest(expectedType, expectedRequest, toolCalls) {
  const endpoints = extractEndpoints(toolCalls);

  if (endpoints.length === 0) {
    return { match: false, reason: 'No endpoints found in toolCalls' };
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º account_id –∏–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const accountId = extractAccountId(expectedRequest);

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π request
  const normalizedExpected = normalizeEndpoint(expectedRequest, accountId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π endpoint
  for (const endpoint of endpoints) {
    const normalizedEndpoint = normalizeEndpoint(endpoint, accountId);

    if (normalizedEndpoint === normalizedExpected) {
      return { match: true, matchedEndpoint: endpoint };
    }
  }

  return {
    match: false,
    reason: `Expected: ${normalizedExpected}, Got: ${endpoints.join(', ')}`,
  };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è demo-agent –Ω–∞ train.csv...\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ demo-agent
  try {
    const healthCheck = await axios.get(`${DEMO_AGENT_URL}/api/health`);
    if (healthCheck.data.status !== 'ok') {
      throw new Error('Demo-agent –Ω–µ –≥–æ—Ç–æ–≤');
    }
    console.log('‚úÖ Demo-agent –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞: Demo-agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.error(`   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ demo-agent –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${DEMO_AGENT_URL}`);
    console.error(`   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd demo-agent && npm run dev`);
    process.exit(1);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ train.csv...');
  const trainData = loadTrainCsv();
  console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${trainData.length} –∑–∞–ø–∏—Å–µ–π\n`);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
  const sessionId = await createSession();
  console.log(`   Session ID: ${sessionId}\n`);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  let total = 0;
  let correct = 0;
  const wrongRequests = [];

  console.log('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
  console.log('‚ïê'.repeat(80));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  for (const row of trainData) {
    total++;
    const { uid, type, question, request } = row;

    console.log(`\n[${total}/${trainData.length}] UID: ${uid}`);
    console.log(`Question: ${question}`);
    console.log(`Expected: ${type} ${request}`);

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
      const accountId = extractAccountId(request);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ demo-agent
      const response = await sendMessage(sessionId, question, accountId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const matchResult = matchRequest(type, request, response.toolCalls);

      if (matchResult.match) {
        console.log(`‚úÖ PASS`);
        correct++;
      } else {
        console.log(`‚ùå FAIL: ${matchResult.reason}`);
        wrongRequests.push({
          uid,
          type,
          question,
          expected_request: request,
          actual_endpoints: extractEndpoints(response.toolCalls),
          reason: matchResult.reason,
          agent_response: response.message,
        });
      }
    } catch (error) {
      console.log(`‚ùå ERROR: ${error.message}`);
      wrongRequests.push({
        uid,
        type,
        question,
        expected_request: request,
        error: error.message,
      });
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 100));
  }

  console.log('\n' + '‚ïê'.repeat(80));

  // –ü–æ–¥—Å—á—ë—Ç accuracy
  const accuracy = ((correct / total) * 100).toFixed(2);

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('‚ïê'.repeat(80));
  console.log(`–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:       ${total}`);
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ:             ${correct}`);
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:            ${total - correct}`);
  console.log(`Accuracy:             ${accuracy}%`);
  console.log('‚ïê'.repeat(80));

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
  if (wrongRequests.length > 0) {
    writeFileSync(WRONG_REQUESTS_PATH, JSON.stringify(wrongRequests, null, 2), 'utf-8');
    console.log(`\nüíæ –û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${WRONG_REQUESTS_PATH}`);
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${wrongRequests.length}`);
  } else {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  }

  console.log('\n');
}

// –ó–∞–ø—É—Å–∫
runTests().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
